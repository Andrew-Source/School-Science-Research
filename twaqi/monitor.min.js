function getvalinobj(t, e) {
    return Object.keys(t).reduce(function(i, a) {
        return t[a] && "object" == typeof t[a] ? i.concat(getStates(t[a], e)) : (a === e && i.push(t[e]), i)
    }, [])
}
function writemenu(res) {
    res.write(`
        <style>
            ul {
                list-style-type: none;
                margin: 0;
                padding: 0;
                overflow: hidden;
                background-color: #333;
            }

            li {
                float: left;
            }

            li a{
                display: block;
                color: white;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
            }

            li a:hover:not(.active) {
                background-color: #111;
            }

            .active {
                background-color: #4CAF50;
            }
        </style>
        <ul>
          <li><a href="/">Newest data</a></li>
          <li><a href="/data">JSON database</a></li>
          <li><a href="/info">App info</a></li>
          <li style="float:right;"><a class="active" href="/search">Search</a></li>
        </ul>
        <ul>
            <li style="width:100vw;"><div style="margin: auto;"><a href="/info">Taiwan AQI data monitor developed by <b><i>Andrew</i> @ AndrewSource</b></a></div></li>
        </ul>
    `);
}
var express = require("express"),
    app = express(),
    request = require("request"),
    fs = require("fs"),
    jsonfile = require("jsonfile"),
    aqifile = __dirname + "/output/aqi.json",
    aqi, aqifull, cron = require("node-cron"),
    starttime = new Date(),
    datarecorded = 0,
    url = require("url");
cron.schedule("5 * * * *", function() {
    console.log("Cron runned at "+(new Date()).toISOString());
    request("https://taqm.epa.gov.tw/taqm/aqs.ashx?lang=tw&act=aqi-epa", function(t, e, a) {
        aqifull = JSON.parse(a), aqi = aqifull.Data;
        var r = jsonfile.readFileSync("./data/data.json");
        if ("ok" == aqifull.Result)
            for (i = 0; i < aqi.length; i++) {
                var n = new Date;
                var u = undefined;
                if (n.getUTCHours()+8 > 24) {
                    u = n.getUTCFullYear() + "/" + (n.getUTCMonth() + 1) + "/" + (n.getUTCDate()+1) + " " + (n.getUTCHours()+8-24);
                } else {
                    u = n.getUTCFullYear() + "/" + (n.getUTCMonth() + 1) + "/" + n.getUTCDate() + " " + (n.getUTCHours()+8);
                }
                if(aqi[i].Address.indexOf("臺中") != -1 && aqi[i].Time.replace('-', '/').replace(':00:00', '') == u) {
                    var s = {};
                    s.name = aqi[i].SiteName, s.addr = aqi[i].Address, s.pm25 = {val:aqi[i].PM25, avg:aqi[i].PM25_AVG};
                    r[s.name] || (r[s.name] = {}), s.timestamp = u, r[s.name][u] = s;
                }
            }
            datarecorded++;
            jsonfile.writeFileSync("./data/data.json", r)
    });
    (new Date).toUTCString()
});

var morgan = require('morgan');
app.use(morgan('combined'));

app.use("/files", express.static(__dirname + "/public")), app.get("/", function(t, e) {
    var a, r = jsonfile.readFileSync("./data/data.json"),
        s = (Object.keys(r).length, Object.keys(r));
    if (0 == Object.keys(r).length) {
        e.writeHead(404);
        e.write('<head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"></head>');
        writemenu(e);
        e.end("<h1>Sorry no data!</h1>");
    }
    else {
        for (e.writeHead(200, {
                "Content-Type": "text/html"
            }), e.write('<head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"></head>'), writemenu(e), e.write('<style>#datatable{font-family:"Trebuchet MS",Arial,Helvetica,sans-serif;border-collapse:collapse;width:100%}#datatable td,#datatable th{border:1px solid #ddd;padding:8px}#datatable tr:nth-child(even){background-color:#f2f2f2}#datatable tr:hover{background-color:#ddd}#datatable th{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#4CAF50;color:#fff}</style><h1>資料擷取時間點：'+Object.keys(r.豐原)[Object.keys(r.豐原).length-1]+':00</h1>'), e.write("<table id=\"datatable\">"), e.write("<tr><th>地點</th><th>PM2.5</th><th>PM2.5_AVG</th></tr>"), i = 0; i < s.length; i++) a = r[s[i]][Object.keys(r[s[i]])[Object.keys(r[s[i]]).length - 1]], e.write("<tr><td>" + a.name + "</td><td>" + a.pm25.val + "</td><td>" + a.pm25.avg+ "</td></tr>");
        e.write("</table>"), e.end()
    }
}), app.get("/search", function(t, e) {
    var a = jsonfile.readFileSync("./data/data.json"),
        r = t.url,
        s = url.parse(r, !0),
        l = s.query,
        n = Object.keys(a),
        u = [],
        o = l.date + " " + l.time + " UTC+8" || undefined,
        c = new Date(o) || undefined,
        p = undefined;
    if (c.getUTCHours()+8 > 24) {
        p = c.getUTCFullYear() + "/" + (c.getUTCMonth() + 1) + "/" + (c.getUTCDate()+1) + " " + (c.getUTCHours()+8-24);
    } else {
        p = c.getUTCFullYear() + "/" + (c.getUTCMonth() + 1) + "/" + c.getUTCDate() + " " + (c.getUTCHours()+8);
    }
    if(p == "2001/8/1 8") {
        p = "尚未設定";
    }
    e.writeHead(200, {'Content-Type':'text/html'});
    e.write('<!DOCTYPE HTML><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><style>#datatable{font-family:"Trebuchet MS",Arial,Helvetica,sans-serif;border-collapse:collapse;width:100%}#datatable td,#datatable th{border:1px solid #ddd;padding:8px}#datatable tr:nth-child(even){background-color:#f2f2f2}#datatable tr:hover{background-color:#ddd}#datatable th{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#4CAF50;color:#fff}</style><script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"><\/script><link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css"><script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"><\/script></head><body><h1>資料搜尋時間：');
    if (p == "尚未設定") {
        e.write(p);
    } else {
        e.write(p+':00');
    }
    e.write('</h1><form action="/search" method="get">日期：<input class="datepicker" id="inputdate" type="text" name="date"><br /><br />時間：<input class="timepicker" id="inputtime" type="text" name="time"><br /><br /><input type="submit" value="查詢"></form><script src="/files/custom.js"><\/script><br /><hr /><br />');
    if (s.search) {
        for (i = 0; i < n.length; i++) {
            var m = Object.keys(a[n[i]]);
            for (i2 = 0; i2 < m.length; i2++)
                if (a[n[i]][m[i2]].timestamp == p) {
                    var d = {};
                    d.name = a[n[i]][m[i2]].name, d.addr = a[n[i]][m[i2]].addr, d.aqi = a[n[i]][m[i2]].aqi, d.time = a[n[i]][m[i2]].timestamp, d.pollutant = a[n[i]][m[i2]].pollutant, d.pollutant.key = a[n[i]][m[i2]].pollutant.key, d.pollutant.value = a[n[i]][m[i2]].pollutant.value, u.push(d)
                }
        }
    }
        if (0 != u.length) {
            for (e.write("<table id=\"datatable\">"), e.write("<tr><th>地點</th><th>PM25.</th><th>PM2.5_AVG</th></tr>"), i = 0; i < u.length; i++) e.write("<tr><td>" + u[i].name + "</td><td>" + u[i].pm25.val + "</td><td>" + u[i].pm25.avg + "</td></tr>");
            e.write("</table>");
        } else {
            e.write("<h1>No result founded!</h1>");
        }
    e.end('</body></html>');
});
app.get("/data", function(t, e) {var datajson = jsonfile.readFileSync('./data/data.json'); e.json(datajson);});
app.get("/info", function(t, e) {
    var totalrecored;
    if(jsonfile.readFileSync('./data/data.json').豐原) {
        totalrecored = Object.keys(jsonfile.readFileSync('./data/data.json').豐原).length
    } else {totalrecored = 0;};
    e.status(200).send("<h1>App info:</h1><h2>Started at: "+starttime+"</h2><h2>Data catch frequency: 1hr</h2><h2>Data archived (since app start): "+datarecorded+"</h2><h2>Data archived (total): "+totalrecored);
});

var port = process.env.PORT || 5118;
app.listen(port, () => {
    console.log("Server starting at port "+port);
});
